{
    "Freezed Class": {
        "prefix": "freezed",
        "description": "Create a basement for a freezed class.",
        "body": [
            "import 'package:freezed_annotation/freezed_annotation.dart';",
            "",
            "part '$TM_FILENAME_BASE.freezed.dart';",
            "part '$TM_FILENAME_BASE.g.dart';",
            "",
            "@freezed",
            "class ${1:ClassName} with _$${1:ClassName} {",
            "  const factory ${1:ClassName}({",
            "    required $0,",
            "  }) = _${1:ClassName};",
            "",
            "  factory ${1:ClassName}.fromJson(Map<String, dynamic> json) =>",
            "      _$${1:ClassName}FromJson(json);",
            "}"
        ],
    },
    "App API Client": {
        "prefix": "remote_data_source_app",
        "description": "Snippet for quick creation of an remote data source for App.",
        "body": [
            "import 'package:dio/dio.dart';",
            "import 'package:repo_finder/injection/network_module.dart';",
            "import 'package:injectable/injectable.dart';",
            "import 'package:retrofit/retrofit.dart';",
            "",
            "part '$TM_FILENAME_BASE.g.dart';",
            "",
            "@RestApi()",
            "@lazySingleton",
            "abstract class ${2:Scope}RemoteDataSource {",
            "  @factoryMethod",
            "  factory $2RemoteDataSource(",
            "    @Named(dioAuthenticated) Dio dio,",
            "  ) = _$2RemoteDataSource;",
            "",
            "  ${3:/* Fill your calls here */}",
            "}",
            ""
        ],
    },
    "Remapper": {
        "prefix": "remapper",
        "description": "Create a basement for a remapper class.",
        "body": [
            "import 'package:injectable/injectable.dart';",
            "",
            "@lazySingleton",
            "class ${1:Entity}Remapper {",
            "  ${1:Entity}Entity fromNetworkDto(${1:Entity}Dto dto) {",
            "    return ${1:Entity}Entity(",
            "       ${2}",
            "    );",
            "  }",
            "",
            "}"
        ],
    },
    "BaseStatus Flow Method": {
        "prefix": "basestatus_method",
        "description": "Create a method with BaseStatus flow. When upading this snippet, make sure to reflect the changes in the [UsingBaseStatus.md] playbook.",
        "body": [
            "Future<void> ${1:methodName}() async {",
            "  if (state.${2:[statusScope: initializing, loading...]}Status.isLoading) {",
            "    return;",
            "  }",
            "  ",
            "  try {",
            "    log.i('${3:What are you doing?} ...');",
            "    ",
            "    emit(state.copyWith(${2}Status: const BaseStatus.loading()));",
            "    ",
            "    final result = await _${6:Action}UseCase();",
            "    ",
            "    if (isClosed) {",
            "      return;",
            "    }",
            "    ",
            "    emit(",
            "      state.copyWith(",
            "        ${2}Status: const BaseStatus.success(),",
            "        // Emit result!",
            "        ${7}",
            "      ),",
            "    );",
            "    ",
            "    log.i('${4:Success message}!');",
            "  } catch (e, s) {",
            "    if (isClosed) {",
            "      return;",
            "    }",
            "    ",
            "    log.e('Unable to ${5:Failure message}', e, s);",
            "    final error = ResponseError.from(e);",
            "    emit(state.copyWith(${2}Status: BaseStatus.failure(error)));",
            "  }",
            "}",
        ],
    },
    "BaseStatus Flow": {
        "prefix": "basestatus_flow",
        "description": "Create a BaseStatus flow. When upading this snippet, make sure to reflect the changes in the [UsingBaseStatus.md] playbook.",
        "body": [
            "try {",
            "  log.i('${1:What are you doing?} ...');",
            "  ",
            "  emit(state.copyWith(${2:Status scope: initializing, loading...}Status: const BaseStatus.loading()));",
            "  ",
            "  final result = await _${4:Action}UseCase();",
            "  ",
            "  if (isClosed) {",
            "    return;",
            "  }",
            "  ",
            "  emit(",
            "    state.copyWith(",
            "      ${2}Status: const BaseStatus.success(),",
            "      // Emit result!",
            "      ${7}",
            "    ),",
            "  );",
            "  ",
            "  log.i('${3:Success message}!');",
            "} catch (e, s) {",
            "  if (isClosed) {",
            "    return;",
            "  }",
            "  ",
            "  log.e('Unable to ${1}', e, s);",
            "  final error = ResponseError.from(e);",
            "  emit(state.copyWith(${2}Status: BaseStatus.failure(error)));",
            "}",
        ],
    },
    "Return if is closed": {
        "prefix": "isclosed_return",
        "description": "Return if is closed",
        "body": [
            "if (isClosed) {",
            "  return;",
            "}",
            "",
            "${0}",
        ],
    },
    "emit state with": {
        "prefix": "emitwith",
        "description": "emit state with...",
        "body": [
            "emit(",
            "  state.copyWith(",
            "    ${0}",
            "  ),",
            ");",
        ],
    }
}